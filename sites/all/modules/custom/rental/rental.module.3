<?php

module_load_include('inc', 'rental', 'common');
function rental_menu()
{
    $query = "select nid from node where type='menu'";
    $records = db_query($query);
    $items = array();
    $page_arguments = array();
    foreach ($records as $record) {
        $node = node_load($record->nid);
        if (!empty($node->field_page_arguments['und'])) {
            $page_arguments = explode(",", $node->field_page_arguments['und'][0]['value']);
        }
        $items[$node->field_url['und'][0]['value']] = array(
            'title' => $node->title,
            'access callback' => TRUE,
            'page callback' => $node->field_page_callback['und'][0]['value'],
            'page arguments' => $page_arguments,
            'file' => $node->field_file['und'][0]['value'],
        );
    }
    return $items;
}

function rental_page_alter()
{
    global $user;
    $user_id = $user->uid;
    $rpath = request_path();
    # core dataTables css
    drupal_add_css('sites/all/libraries/DataTables/media/css/jquery.dataTables.min.css');
    # core dataTables js
    drupal_add_js('sites/all/libraries/DataTables/media/js/jquery.dataTables.min.js');
    # bootstrap js
    drupal_add_js('sites/all/libraries/DataTables/media/js/bootstrap/dataTables.bootstrap.js');
    # jquery-ui css
    //drupal_add_css('sites/all/libraries/DataTables/media/css/jquery-ui/dataTables.jqueryui.css');
    # jquery-ui js
    //drupal_add_js('sites/all/libraries/DataTables/media/js/jquery-ui/dataTables.jqueryui.js');

    drupal_add_library('system', 'ui.datepicker');
    if (!user_is_logged_in()) {
        if (request_path() != 'user') {
            drupal_goto('user', array());
        }
    }
    $no_header_pages = array(
        "node/add/tenant",
        "node/add/account",
        "node/add/billing",
        "node/add/expense",
        "node/add/income",
        "node/add/unit",
        "node/add/backups",
        "node/add/unit-type",
        "node/add/unit-group",
    );
    if (in_array($rpath, $no_header_pages) and $user_id <> 1) {
        drupal_add_css('sites/all/themes/Sarai/css/iframe.css');
    }
    if (preg_match('/node\/[0-9]+\/edit/', $rpath) and $user_id <> 1) {
        drupal_add_css('sites/all/themes/Sarai/css/iframe.css');
    }
    if (preg_match('/node\/[0-9]+\/delete/', $rpath) and $user_id <> 1) {
        drupal_add_css('sites/all/themes/Sarai/css/iframe.css');
    }

    
}

function rental_theme()
{
    return array(
        'dashboard' => array(
            'template' => 'dashboard',
            'variables' => array('title' => '', 'contents' => array())
        ),
        'accounts' => array(
            'template' => 'accounts',
            'variables' => array('title' => '', 'contents' => array())
        ),
        'income' => array(
            'template' => 'income',
            'variables' => array('title' => '', 'contents' => array())
        ),
        'billing' => array(
            'template' => 'billing',
            'variables' => array('title' => '', 'contents' => array())
        ),
        'units' => array(
            'template' => 'units',
            'variables' => array('title' => '', 'contents' => array())
        ),
        'tenants' => array(
            'template' => 'tenants',
            'variables' => array('title' => '', 'contents' => array())
        ),
        'debtors' => array(
            'template' => 'debtors',
            'variables' => array('title' => '', 'contents' => array())
        ),
        'reports' => array(
            'template' => 'reports',
            'variables' => array('title' => '', 'contents' => array())
        ),
        'expenses' => array(
            'template' => 'expenses',
            'variables' => array('title' => '', 'contents' => array())
        ),
        'transactions' => array(
            'template' => 'transactions',
            'variables' => array('title' => '', 'contents' => array())
        ),
        'mytransactions' => array(
            'template' => 'mytransactions',
            'variables' => array('title' => '', 'contents' => array())
        ),
        'mybilling' => array(
            'template' => 'mybilling',
            'variables' => array('title' => '', 'contents' => array())
        ),
        'receipt' => array(
            'template' => 'receipt',
            'variables' => array('title' => '', 'contents' => array())
        ),
        'invoice' => array(
            'template' => 'invoice',
            'variables' => array('title' => '', 'contents' => array())
        ),
        'voucher' => array(
            'template' => 'voucher',
            'variables' => array('title' => '', 'contents' => array())
        ),
        'unit-history' => array(
            'template' => 'unit-history',
            'variables' => array('title' => '', 'contents' => array())
        ),
        'backups' => array(
            'template' => 'backups',
            'variables' => array('title' => '', 'contents' => array())
        ),
        'mypayments' => array(
            'template' => 'mypayments',
            'variables' => array('title' => '', 'contents' => array())
        ),
        'unit-expenses' => array(
            'template' => 'unit-expenses',
            'variables' => array('title' => '', 'contents' => array())
        ),
        'unit-profit-loss' => array(
            'template' => 'unit-profit-loss',
            'variables' => array('title' => '', 'contents' => array())
        ),
        'unit-name-profit-loss' => array(
            'template' => 'unit-name-profit-loss',
            'variables' => array('title' => '', 'contents' => array())
        ),
        'unit-types' => array(
            'template' => 'unit-types',
            'variables' => array('title' => '', 'contents' => array())
        ),
        'notifications' => array(
            'template' => 'notifications',
            'variables' => array('title' => '', 'contents' => array())
        ),
        'unit-groups' => array(
            'template' => 'unit-groups',
            'variables' => array('title' => '', 'contents' => array())
        ),
        'support' => array(
            'template' => 'support',
            'variables' => array('title' => '', 'contents' => array())
        ),
    );
}

function rental_form_alter(&$form, &$form_state, $form_id)
{
    global $user;
    $user_id = $user->uid;
    if ($user_id == 1) {
        return;
    }
    $forms = array(
        "tenant_node_form",
        "income_node_form",
        "expense_node_form",
        "unit_node_form",
        "unit_type_node_form",
        "unit_group_node_form",
        "billing_node_form",
        "account_node_form",
        "backups_node_form"

    );
    if (in_array($form_id, $forms)) {

        $form["body"]['#access'] = 0;
        $form["title"]['#access'] = 0;
        $form['actions']["delete"]['#access'] = 0;
        $form['actions']["preview"]['#access'] = 0;
        $prefix = str_replace('_node_form', '', $form_id);
        $form['actions']['submit']['#submit'][] = $prefix . "_submit_handler";
        $form['#validate'][] = $prefix . "_validate_handler";
    }

    if ($form_id == 'unit_type_node_form') {
        $form["title"]['#access'] = 1;

    }

    if ($form_id == 'unit_group_node_form') {
        $form["title"]['#access'] = 1;

    }
    if ($form_id == "node_delete_confirm") {
        $type = $form['#node']->type;

        switch ($type) {
            case "tenant":
                $form['#submit'][] = "delete_tenant_submit_handler";
                break;
            case "expense":
                $form['#submit'][] = "delete_expenses_submit_handler";
                break;
            case "income":
                $form['#submit'][] = "delete_income_submit_handler";
                break;
            case "billing":
                $form['#submit'][] = "delete_billing_submit_handler";
                break;
            default:
                $form['#submit'][] = "delete_submit_handler";
                break;
        }
    }

    if (in_array($form_id, array("income_node_form", "billing_node_form", "expense_node_form"))) {
        $url = $_SERVER['HTTP_REFERER'];
        $matches = array();
        if (preg_match("/=([0-9]+)/", $url, $matches)) {
            $query = "select nid from node where type='account' and title='{$matches[1]}'";
            $records = db_query($query);
            $aid = $records->fetchAll()[0]->nid;
            $form['aid'] = array(
                '#type' => 'hidden',
                '#value' => $aid,
            );

        }
        if (isset($_POST['aid'])) {
            $form['aid'] = array(
                '#type' => 'hidden',
                '#value' => $_POST['aid'],
            );

        }
    }
}

function billing_submit_handler(&$form, &$form_state)
{
    if (isset($_POST['aid'])) {
        $aid = $_POST['aid'];
        $query = array(
            'query' => array('nid' => node_load($aid)->title)
        );
        $form_state['redirect'] = array('mybilling', $query);
    } else {

        $form_state['redirect'] = 'billing';
    }
}

function account_submit_handler(&$form, &$form_state)
{
    $form_state['redirect'] = 'accounts';
}

function unit_type_submit_handler(&$form, &$form_state)
{
    $form_state['redirect'] = 'unit-types';
}

function unit_group_submit_handler(&$form, &$form_state)
{
    $form_state['redirect'] = 'unit-groups';
}

function income_submit_handler(&$form, &$form_state)
{
    if (isset($_POST['aid'])) {
        $aid = $_POST['aid'];
        $query = array(
            'query' => array('nid' => node_load($aid)->title)
        );
        $form_state['redirect'] = array('mypayments', $query);
    } else {

        $form_state['redirect'] = 'income';
    }
}

function unit_submit_handler(&$form, &$form_state)
{
    $form_state['redirect'] = 'units';
}

function tenant_submit_handler(&$form, &$form_state)
{
    $form_state['redirect'] = 'tenants';
}

function expense_submit_handler(&$form, &$form_state)
{
    if (isset($_POST['aid'])) {
        $aid = $_POST['aid'];
        $query = array(
            'query' => array('nid' => node_load($aid)->title)
        );
        $form_state['redirect'] = array('unit-expenses', $query);
    } else {

        $form_state['redirect'] = 'expenses';
    }
}

function backups_submit_handler(&$form, &$form_state)
{
    $form_state['redirect'] = 'backups';
}

function billing_validate_handler(&$form, &$form_state)
{
    global $user;
    $user_id = $user->uid;
    $rpath = request_path();
    $nid = '';
    if (preg_match('/node\/[0-9]+\/edit/', $rpath) and $user_id <> 1) {
        $nid = str_replace('node/', '', $rpath);
        $nid = str_replace('/edit', '', $nid);
    }
    if (form_get_errors())
        return;

    $said = $form_state['values']['field_account']['und']['0']['target_id'];
    $aid = $_POST['aid'];
    $anode = node_load($aid);
    if ($aid <> $said) {
        form_set_error('message', "Please select account:  " . $anode->field_account_name['und'][0]['value']);
    }
    #estimate cost of unit
    $cost = node_load($form_state['values']['field_unit']['und']['0']['target_id'])->field_cost_per_month['und']['0']['value'];
    $date0 = new DateTime($form_state['values']['field_start_date']['und']['0']['value']);
    $date1 = new DateTime($form_state['values']['field_stop_date']['und']['0']['value']);
    $d = (int)$date0->format('d') - 1;
    $date2 = new DateTime($form_state['values']['field_stop_date']['und']['0']['value']);
    $date2->modify("-$d day");
    $s2 = $date2->format('Ymd');
    $date2->modify('last day of this month');
    $s2c = $date2->format('Ymd');
    $d0 = (int)$date0->format('d');
    $m0 = $date0->format('m');
    $m1 = $date1->format('m');
    $y0 = $date0->format('Y');
    $y1 = $date0->format('Y');
    $mths = count_months($m0, $m1, $y1, $y0);
    if ($d0 != 1) {
        $mths = $mths - 1;
    }
    if ($s2 != $s2c) {
        form_set_error('message', "Invalid stop date:" . $date1->format('d/m/Y') . "" . $mths);
    }
    $amount = $mths * $cost;
    $form_state['values']['field_amount_due']['und']['0']['value'] = $amount;
    # check that stop_date is after start_date
    if ($date1 < $date0) {
        form_set_error('message', "Invalid stop date:" . $date1->format('d/m/Y'));
    }
    # check whether unit is occupied for selected period
    $unit_id = $form_state['values']['field_unit']['und']['0']['target_id'];
    $start_date = str_replace("T", " ", $form_state['values']['field_start_date']['und']['0']['value']);
    $stop_date = str_replace("T", " ", $form_state['values']['field_stop_date']['und']['0']['value']);
    $query = "
      select count(*) as bnum from
      field_data_field_start_date a join field_data_field_stop_date b on a.entity_id=b.entity_id join field_data_field_unit c on a.entity_id=c.entity_id
      where NOT(
      (a.field_start_date_value<='$start_date' and b.field_stop_date_value<='$start_date')
      OR
      (a.field_start_date_value>='$stop_date' and b.field_stop_date_value>='$stop_date')
      )
      AND
      c.field_unit_target_id='$unit_id'
      AND
      a.entity_id<>'$nid'
     ";

    $records = db_query($query);
    $bnum = $records->fetchAll()[0]->bnum;
    if ($bnum > 0) {
        form_set_error('message', "The unit selected is occupied for the selected period");
    }
}

function account_validate_handler(&$form, &$form_state)
{
    if (form_get_errors())
        return;

}

function unit_type_validate_handler(&$form, &$form_state)
{
    if (form_get_errors())
        return;
}

function unit_group_validate_handler(&$form, &$form_state)
{
    if (form_get_errors())
        return;
}

function unit_validate_handler(&$form, &$form_state)
{
    if (form_get_errors())
        return;
    $form_state['values']['title'] = $form_state['values']['field_unit_name']['und']['0']['value'] . " " . $form_state['values']['field_unit_code']['und']['0']['value'];
}

function tenant_validate_handler(&$form, &$form_state)
{
    if (form_get_errors())
        return;
    $form_state['values']['title'] = $form_state['values']['field_full_name']['und']['0']['value'];
}

function income_validate_handler(&$form, &$form_state)
{
    if (form_get_errors())
        return;
    $said = $form_state['values']['field_account']['und']['0']['target_id'];
    $aid = $_POST['aid'];
    $node = node_load($aid);
    if ($aid <> $said) {
        form_set_error('message', "Please select account:  " . $node->field_account_name['und'][0]['value']);
    }

}

function expense_validate_handler(&$form, &$form_state)
{
    if (form_get_errors())
        return;

}

function backups_validate_handler(&$form, &$form_state)
{
    if (form_get_errors())
        return;

}

function delete_expenses_submit_handler(&$form, &$form_state)
{
    if (form_get_errors())
        return;
    $form_state['redirect'] = 'expenses';
}

function delete_billing_submit_handler(&$form, &$form_state)
{
    if (form_get_errors())
        return;
    $form_state['redirect'] = 'billing';
}

function delete_income_submit_handler(&$form, &$form_state)
{
    if (form_get_errors())
        return;
    $form_state['redirect'] = 'income';
}

function delete_submit_handler(&$form, &$form_state)
{
    if (form_get_errors())
        return;
    $form_state['redirect'] = 'dashboard';
}